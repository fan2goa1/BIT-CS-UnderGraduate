# 1120200822 郑子帆

# Execution begins at address 0
    .pos 0
    irmovq stack,%rsp
    call main
    halt

# Sample linked list
.align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main: 
    irmovq ele1, %rdi
    call rsum_list
    ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
    pushq %r8 
    xorq %rax, %rax		# clean %rax
    jmp test

loop:
    mrmovq (%rdi), %r8	# val = ls -> val
    mrmovq 8(%rdi), %rdi  # ls -> next
    call rsum_list
    addq %r8, %rax		# val + rest
    jmp end
   
test:
	andq %rdi, %rdi
	jne loop
	xorq %rax, %rax 		# if !ls return 0

end:
    popq %r8
    ret 

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
